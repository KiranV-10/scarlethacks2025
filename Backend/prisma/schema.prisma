generator client {
  provider                  = "prisma-client-py"
  enable_experimental_decimal = true
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  journalEntries JournalEntry[]
  profile       Profile?
  qrCode        QRCode?
}

model Profile {
  id                String             @id @default(cuid())
  userId            String   @unique  // âœ… Add @unique here
  gender            String
  height            Int
  weight            Int
  dateOfBirth       DateTime
  medicalConditions MedicalCondition[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MedicalCondition {
  id            String   @id @default(cuid())
  profileId     String
  condition     String
  diagnosedDate DateTime
  status        String
  treatments    String?
  notes         String?
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model QRCode {
  id                    String   @id @default(cuid())
  uuid                  String   @default(cuid())
  userId                String
  qrCodeData            String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  shareName             Boolean @default(false)
  shareDateOfBirth      Boolean @default(false)
  shareMedicalHistory   Boolean @default(false)
  shareAllergies        Boolean @default(false)
  shareHealthLogs       Boolean @default(false)

  @@unique([userId])
}

model JournalEntry {
  id               String   @id @default(cuid())
  entryTitle       String
  entryDate        DateTime @db.Date
  medicationsTaken String?
  symptomsHad      String?
  sleep            Decimal? @db.Decimal(3, 1)
  otherNotes       String?
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id      String  @id @default(cuid())
  answer1 String?
  answer2 String?
  answer3 String?
}

model HealthService {
  id           String   @id @default(cuid())
  name         String
  type         String
  address      String
  latitude     Float
  longitude    Float
  lastVerified DateTime?
  status       String   @default("unknown")
}
